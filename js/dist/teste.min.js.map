{"version":3,"sources":["teste.js"],"names":["_validaCpf","_interopRequireDefault","require","_validaIdade","camposDoFormulario","document","querySelectorAll","formulario","querySelector","addEventListener","e","preventDefault","elements","value","listaRespostas","aniversario","localStorage","target","stringify","window","location","href","forEach","campo","evento","tiposDeErro","mensagens","patternMismatch","tooShort","valueMissing","typeMismatch","customError","termos","verificaCampo","setCustomValidity","name","length","erro","validity","mensagem","console","mensagemErro","parentNode","validadorDeInput","checkValidity","textContent"],"mappings":"aAAA,IAAAA,WAAAC,uBAAAC,QAAA,oBACAC,aAAAF,uBAAAC,QAAA,8FADA,IAAAE,mBAAAC,SAAAC,iBAAA,cAGMC,WAAaF,SAASG,cAAc,qBAE1CD,WAAWE,iBAAiB,SAAU,SAACC,GACnCA,EAAEC,iBAJAP,IAAAA,EAAqBC,CACrBE,KAAUG,EAAGL,OAAQO,SAAX,KAA0BC,MAE1CN,MAAWE,EAAAA,OAAAA,SAAAA,MAA2BI,MAChCF,GAAAA,EAAAA,OAAFC,SAAED,GAAFE,MAEMC,IAAAA,EAAAA,OAAiBF,SAAjBE,IAAiBD,MACnBE,YAAiBH,EAAAA,OAASA,SAATA,YADEC,OAInBG,aAASC,QAAOL,WAAgBC,KAJbK,UAAAJ,IAAvBK,OAAAC,SAAAC,KAAA,iBAWHjB,mBAdDkB,QAAA,SAAAC,GAgBAnB,EAAAA,iBAA2B,OAAA,WAAA,OAACmB,cAAUA,KAClCA,EAAMd,iBAAiB,UAAQ,SAAAe,GAAA,OAAAA,EAAAb,qBAC/BY,IAAAA,YAAMd,CAAkC,eAAxC,eAFJ,kBAKMgB,WAQAC,eAGEC,UAAAA,CACAC,KAAAA,CAJUC,aAAA,wCAMTF,gBAAE,sCACHE,SAAc,uCAEdD,MAAAA,CATUC,aAAA,0CAWVC,aAAA,uCACAD,SAAc,wCAEdD,GAAAA,CAdUC,aAAA,sCAgBTF,gBAAA,oCACDE,SAAc,iDAEdE,IAAAA,CACAH,aAAU,uCApBAD,gBAAA,qCAsBdZ,YAAa,6BACTc,SAAc,kDAvBJd,YAAA,CA0BRc,aAAE,sDACJA,YAAc,sDA3BtBG,OAAA,CA2BQH,aAAc,wDAItB,SAASI,cAAcV,GAGnB,IAAIA,EAAA,GACAA,EAAAW,kBAAA,IACH,OAAAX,EAAAY,MAAA,IAAAZ,EAAAV,MAAAuB,SADG,EAAApC,WAAA,SAAQuB,GAGR,eAAAA,EAAAY,MAAA,IAAAZ,EAAAV,QACH,EAAAV,aAAA,SAAAoB,GACDE,YAAYH,QAAQ,SAAAe,GACZd,EAAMe,SAAND,KACAE,EAAWb,UAAgBS,EAAME,MAAjCA,GACAG,QAAYD,IAAAA,MAGpB,IAAME,EAAelB,EAAMmB,WAAWlC,cAAc,kBAC9CmC,EAAmBpB,EAAMqB,gBAK3BH,EAAaI,YAHZF,EAGD,GAF2BJ","file":"teste.min.js","sourcesContent":["import ehUmCPF from \"./valida-cpf.js\";\r\nimport ehMaiorDeIdade from \"./valida-idade.js\";\r\nconst camposDoFormulario = document.querySelectorAll('[required]')\r\nconst formulario = document.querySelector('[data-formulario]');\r\n\r\nformulario.addEventListener(\"submit\", (e) => {\r\n    e.preventDefault();\r\n\r\n    const listaRespostas = {\r\n        \"nome\": e.target.elements[\"nome\"].value,\r\n        \"email\": e.target.elements[\"email\"].value,\r\n        \"rg\": e.target.elements[\"rg\"].value,\r\n        \"cpf\": e.target.elements[\"cpf\"].value,\r\n        \"aniversario\": e.target.elements[\"aniversario\"].value,\r\n    }\r\n\r\n    localStorage.setItem(\"cadastro\", JSON.stringify(listaRespostas));\r\n\r\n    window.location.href = \"./index.html\";\r\n})\r\n\r\ncamposDoFormulario.forEach((campo) => {\r\n    campo.addEventListener(\"blur\", () => verificaCampo(campo));\r\n    campo.addEventListener(\"invalid\", evento => evento.preventDefault())\r\n})\r\n\r\nconst tiposDeErro = [\r\n    'valueMissing',\r\n    'typeMismatch',\r\n    'patternMismatch',\r\n    'tooShort',\r\n    'customError'\r\n]\r\n\r\nconst mensagens = {\r\n    nome: {\r\n        valueMissing: \"O campo de nome não pode estar vazio.\",\r\n        patternMismatch: \"Por favor, preencha um nome válido.\",\r\n        tooShort: \"Por favor, preencha um nome válido.\"\r\n    },\r\n    email: {\r\n        valueMissing: \"O campo de e-mail não pode estar vazio.\",\r\n        typeMismatch: \"Por favor, preencha um email válido.\",\r\n        tooShort: \"Por favor, preencha um email válido.\"\r\n    },\r\n    rg: {\r\n        valueMissing: \"O campo de RG não pode estar vazio.\",\r\n        patternMismatch: \"Por favor, preencha um RG válido.\",\r\n        tooShort: \"O campo de RG não tem caractéres suficientes.\"\r\n    },\r\n    cpf: {\r\n        valueMissing: 'O campo de CPF não pode estar vazio.',\r\n        patternMismatch: \"Por favor, preencha um CPF válido.\",\r\n        customError: \"O CPF digitado não existe.\",\r\n        tooShort: \"O campo de CPF não tem caractéres suficientes.\"\r\n    },\r\n    aniversario: {\r\n        valueMissing: 'O campo de data de nascimento não pode estar vazio.',\r\n        customError: 'Você deve ser maior que 18 anos para se cadastrar.'\r\n    },\r\n    termos: {\r\n        valueMissing: 'Você deve aceitar nossos termos antes de continuar.',\r\n    }\r\n}\r\n\r\nfunction verificaCampo(campo) {\r\n    let mensagem = \"\";\r\n    campo.setCustomValidity('');\r\n    if (campo.name == \"cpf\" && campo.value.length >= 11) {\r\n        ehUmCPF(campo);\r\n    }\r\n    if (campo.name == \"aniversario\" && campo.value != \"\") {\r\n        ehMaiorDeIdade(campo);\r\n    }\r\n    tiposDeErro.forEach(erro => {\r\n        if (campo.validity[erro]) {\r\n            mensagem = mensagens[campo.name][erro];\r\n            console.log(mensagem);\r\n        }\r\n    })\r\n    const mensagemErro = campo.parentNode.querySelector('.mensagem-erro');\r\n    const validadorDeInput = campo.checkValidity();\r\n\r\n    if (!validadorDeInput) {\r\n        mensagemErro.textContent = mensagem;\r\n    } else {\r\n        mensagemErro.textContent = \"\";\r\n    }\r\n}"]}